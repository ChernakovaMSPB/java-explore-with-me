{
	"info": {
		"_postman_id": "e206f1ac-62e1-4a11-933e-142ef85f5f11",
		"name": "Test Explore With Me - feature_comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26118403"
	},
	"item": [
		{
			"name": "Получение подробной информации об опубликованном событии по его идентификатору",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        pm.collectionVariables.set('response', event);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Test event 'comments' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('comments');\r",
							"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"0\"').to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"annotation\": \"Eveniet sit fugit omnis asperiores. Deleniti omnis itaque aspernatur et et ab blanditiis et error. Fugiat quis ut maiores. Perferendis debitis veniam perspiciatis ad consectetur. Tenetur quasi unde aperiam voluptatibus. Rerum corporis laborum veritatis sequi quis temporibus.\",\r\n    \"category\": {\r\n        \"id\": 1,\r\n        \"name\": \"Shirt42\"\r\n    },\r\n    \"confirmedRequests\": 0,\r\n    \"createdOn\": \"2023-08-11T16:24:33.630338\",\r\n    \"description\": \"Magnam amet accusamus accusantium tenetur veritatis laborum iste aut soluta. In nihil ab hic cupiditate explicabo sit aut ut et. Voluptate ipsum et fugiat qui sunt facilis magnam quas. Id et eos vel.\\n \\rTempora hic ut aut in sed explicabo. Non culpa sequi eius et et similique assumenda qui. Perferendis nisi id asperiores laudantium ad expedita. Animi molestiae placeat qui qui cupiditate vitae minus. Sit voluptatem facere eos. Dolor doloribus magni.\\n \\rVoluptas veniam amet. Consectetur nulla sapiente est. Voluptas quaerat sint maiores repellendus sit.\",\r\n    \"eventDate\": \"2023-08-11 21:24:33\",\r\n    \"initiator\": {\r\n        \"id\": 1,\r\n        \"name\": \"Olive Wunsch DDS\"\r\n    },\r\n    \"location\": {\r\n        \"id\": 1,\r\n        \"lat\": 35.9927,\r\n        \"lon\": 110.4791\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 927,\r\n    \"publishedOn\": \"2023-08-11T16:24:33.714507\",\r\n    \"requestModeration\": false,\r\n    \"state\": \"PUBLISHED\",\r\n    \"title\": \"Recusandae cumque eum velit velit voluptatem excepturi enim necessitatibus.\",\r\n    \"views\": 1,\r\n    \"comments\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1",
							"description": "(Required) id события"
						}
					]
				},
				"description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "Получение событий с возможностью фильтрации (до добавления комментария)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Test event 'comments' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.have.property('comments');\r",
							"    pm.expect(jsonData[0].comments.length, 'length of \"comments\" must be \"0\"').to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"description\": \"Magnam amet accusamus accusantium tenetur veritatis laborum iste aut soluta. In nihil ab hic cupiditate explicabo sit aut ut et. Voluptate ipsum et fugiat qui sunt facilis magnam quas. Id et eos vel.\\n \\rTempora hic ut aut in sed explicabo. Non culpa sequi eius et et similique assumenda qui. Perferendis nisi id asperiores laudantium ad expedita. Animi molestiae placeat qui qui cupiditate vitae minus. Sit voluptatem facere eos. Dolor doloribus magni.\\n \\rVoluptas veniam amet. Consectetur nulla sapiente est. Voluptas quaerat sint maiores repellendus sit.\",\r\n        \"annotation\": \"Eveniet sit fugit omnis asperiores. Deleniti omnis itaque aspernatur et et ab blanditiis et error. Fugiat quis ut maiores. Perferendis debitis veniam perspiciatis ad consectetur. Tenetur quasi unde aperiam voluptatibus. Rerum corporis laborum veritatis sequi quis temporibus.\",\r\n        \"category\": {\r\n            \"id\": 1,\r\n            \"name\": \"Shirt42\"\r\n        },\r\n        \"confirmedRequests\": 0,\r\n        \"eventDate\": \"2023-08-11 21:24:33\",\r\n        \"initiator\": {\r\n            \"id\": 1,\r\n            \"name\": \"Olive Wunsch DDS\"\r\n        },\r\n        \"paid\": false,\r\n        \"title\": \"Recusandae cumque eum velit velit voluptatem excepturi enim necessitatibus.\",\r\n        \"views\": 1,\r\n        \"comments\": []\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events?categories=1&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&sort=EVENT_DATE&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом аннотации и подробном описании события",
							"disabled": true
						},
						{
							"key": "categories",
							"value": "1",
							"description": "список идентификаторов категорий в которых будет вестись поиск"
						},
						{
							"key": "paid",
							"value": "true",
							"description": "поиск только платных/бесплатных событий",
							"disabled": true
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						},
						{
							"key": "onlyAvailable",
							"value": "false",
							"description": "только события у которых не исчерпан лимит запросов на участие",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "EVENT_DATE",
							"description": "Вариант сортировки: по дате события или по количеству просмотров"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество событий, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество событий в наборе"
						}
					]
				},
				"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария от пользователя id=1  к событию id=1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Test add comment to event 1 from user1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql(\"Всем привет!\");",
							"    pm.expect(jsonData.authorName, '\"authorName\" field').not.null;;",
							"    pm.expect(jsonData.created, '\"created\" field').not.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Всем привет!\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка добавления комментария  к несуществующему/неопубликованному событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Всем привет!\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1000"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка добавления комментария  к  событию от неавторизованного пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404]);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Всем привет!\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка добавления пустого комментария  к  событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?eventId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "1"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение информации об опубликованном событии по его id=1 (после добавления комментария)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарии к событию должны быть заполнены\", function () {\r",
							"    pm.expect(target.comments.join()).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"annotation\": \"Veniam qui fuga aliquam quo totam dicta. Minus quod minima mollitia magni. Pariatur officia ullam sed eos sequi. Dolorum eos earum optio enim sit.\",\r\n    \"category\": {\r\n        \"id\": 1,\r\n        \"name\": \"Rupee39\"\r\n    },\r\n    \"confirmedRequests\": 0,\r\n    \"createdOn\": \"2023-08-11T18:42:18.528444\",\r\n    \"description\": \"Et ipsam et. Voluptates minus provident. Doloribus architecto sit molestias doloribus nobis possimus consectetur. Provident explicabo id. Ea alias sit facilis sit exercitationem beatae. Doloremque aut consectetur iste et sunt ea aut at provident.\\n \\rEt exercitationem voluptatem. Placeat omnis non mollitia saepe sint voluptas. Dicta tempora impedit quidem nihil qui quod assumenda reprehenderit alias. Sit aut sed quam ea distinctio quia. Similique eveniet eaque.\\n \\rBeatae expedita laudantium alias molestias et quos velit ducimus. Et modi quam ipsa praesentium. Unde blanditiis aut dolor sequi nam nesciunt officia aut. Consequatur optio iusto earum mollitia similique.\",\r\n    \"eventDate\": \"2023-08-11 23:42:18\",\r\n    \"initiator\": {\r\n        \"id\": 1,\r\n        \"name\": \"Kara Schroeder\"\r\n    },\r\n    \"location\": {\r\n        \"id\": 1,\r\n        \"lat\": -0.1568,\r\n        \"lon\": -172.841\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 761,\r\n    \"publishedOn\": \"2023-08-11T18:42:18.61963\",\r\n    \"requestModeration\": false,\r\n    \"state\": \"PUBLISHED\",\r\n    \"title\": \"Labore modi rerum id sit et.\",\r\n    \"views\": 1,\r\n    \"comments\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1",
							"description": "(Required) id события"
						}
					]
				},
				"description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "Получение событий, добавленных текущим пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"query": [
						{
							"key": "from",
							"value": "0",
							"description": "количество элементов, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество элементов в наборе"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "3",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий с возможностью фильтрации (после добавления комментария)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Test event 'comments' field\", function () {\r",
							"    pm.expect(target.comments.join(), 'Комментарии к событию должны быть заполнены').to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"description\": \"Et ipsam et. Voluptates minus provident. Doloribus architecto sit molestias doloribus nobis possimus consectetur. Provident explicabo id. Ea alias sit facilis sit exercitationem beatae. Doloremque aut consectetur iste et sunt ea aut at provident.\\n \\rEt exercitationem voluptatem. Placeat omnis non mollitia saepe sint voluptas. Dicta tempora impedit quidem nihil qui quod assumenda reprehenderit alias. Sit aut sed quam ea distinctio quia. Similique eveniet eaque.\\n \\rBeatae expedita laudantium alias molestias et quos velit ducimus. Et modi quam ipsa praesentium. Unde blanditiis aut dolor sequi nam nesciunt officia aut. Consequatur optio iusto earum mollitia similique.\",\r\n        \"annotation\": \"Veniam qui fuga aliquam quo totam dicta. Minus quod minima mollitia magni. Pariatur officia ullam sed eos sequi. Dolorum eos earum optio enim sit.\",\r\n        \"category\": {\r\n            \"id\": 1,\r\n            \"name\": \"Rupee39\"\r\n        },\r\n        \"confirmedRequests\": 0,\r\n        \"eventDate\": \"2023-08-11 23:42:18\",\r\n        \"initiator\": {\r\n            \"id\": 1,\r\n            \"name\": \"Kara Schroeder\"\r\n        },\r\n        \"paid\": false,\r\n        \"title\": \"Labore modi rerum id sit et.\",\r\n        \"views\": 1,\r\n        \"comments\": []\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events?categories=1&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&sort=EVENT_DATE&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом аннотации и подробном описании события",
							"disabled": true
						},
						{
							"key": "categories",
							"value": "1",
							"description": "список идентификаторов категорий в которых будет вестись поиск"
						},
						{
							"key": "paid",
							"value": "true",
							"description": "поиск только платных/бесплатных событий",
							"disabled": true
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должно произойти событие"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						},
						{
							"key": "onlyAvailable",
							"value": "false",
							"description": "только события у которых не исчерпан лимит запросов на участие",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "EVENT_DATE",
							"description": "Вариант сортировки: по дате события или по количеству просмотров"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество событий, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество событий в наборе"
						}
					]
				},
				"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "Поиск комментариев администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Test search response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/search?text=&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"search"
					],
					"query": [
						{
							"key": "text",
							"value": ""
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должно произойти событие"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество событий, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "1000",
							"description": "количество событий в наборе"
						}
					]
				},
				"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
			},
			"response": []
		},
		{
			"name": "Изменение комментария id=1 автором комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Комментарий должен содержать поля: id, text, author, created\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Test event 'comments' field\", function () {    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);",
							"    pm.expect(jsonData.text, '\"text\" field').to.eql(\"Сегодня чудесная погода!\");",
							"    pm.expect(jsonData.authorName, '\"authorName\" field').not.null;;",
							"    pm.expect(jsonData.created, '\"created\" field').not.null;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Сегодня чудесная погода!\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Попытка изменения чужого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Можете уточнить все подробности у меня!\"\r\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение информации об опубликованном событии по его id=1 (после изменения комментария)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарии к событию должны быть заполнены\", function () {\r",
							"    pm.expect(target.comments.join()).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"annotation\": \"Veniam qui fuga aliquam quo totam dicta. Minus quod minima mollitia magni. Pariatur officia ullam sed eos sequi. Dolorum eos earum optio enim sit.\",\r\n    \"category\": {\r\n        \"id\": 1,\r\n        \"name\": \"Rupee39\"\r\n    },\r\n    \"confirmedRequests\": 0,\r\n    \"createdOn\": \"2023-08-11T18:42:18.528444\",\r\n    \"description\": \"Et ipsam et. Voluptates minus provident. Doloribus architecto sit molestias doloribus nobis possimus consectetur. Provident explicabo id. Ea alias sit facilis sit exercitationem beatae. Doloremque aut consectetur iste et sunt ea aut at provident.\\n \\rEt exercitationem voluptatem. Placeat omnis non mollitia saepe sint voluptas. Dicta tempora impedit quidem nihil qui quod assumenda reprehenderit alias. Sit aut sed quam ea distinctio quia. Similique eveniet eaque.\\n \\rBeatae expedita laudantium alias molestias et quos velit ducimus. Et modi quam ipsa praesentium. Unde blanditiis aut dolor sequi nam nesciunt officia aut. Consequatur optio iusto earum mollitia similique.\",\r\n    \"eventDate\": \"2023-08-11 23:42:18\",\r\n    \"initiator\": {\r\n        \"id\": 1,\r\n        \"name\": \"Kara Schroeder\"\r\n    },\r\n    \"location\": {\r\n        \"id\": 1,\r\n        \"lat\": -0.1568,\r\n        \"lon\": -172.841\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 761,\r\n    \"publishedOn\": \"2023-08-11T18:42:18.61963\",\r\n    \"requestModeration\": false,\r\n    \"state\": \"PUBLISHED\",\r\n    \"title\": \"Labore modi rerum id sit et.\",\r\n    \"views\": 1,\r\n    \"comments\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1",
							"description": "(Required) id события"
						}
					]
				},
				"description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		},
		{
			"name": "Попытка удаления чужого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария id=1 его автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					},
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение информации об опубликованном событии по его идентификатору id=1 (после удаления комментария)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('views');\r",
							"pm.expect(target).to.have.property('confirmedRequests');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('publishedOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"pm.expect(target).to.have.property('comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Test event 'comments' field\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('comments');\r",
							"    pm.expect(jsonData.comments.length, 'length of \"comments\" must be \"0\"').to.eql(0);\r",
							"});\r",
							"    \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"annotation\": \"Veniam qui fuga aliquam quo totam dicta. Minus quod minima mollitia magni. Pariatur officia ullam sed eos sequi. Dolorum eos earum optio enim sit.\",\r\n    \"category\": {\r\n        \"id\": 1,\r\n        \"name\": \"Rupee39\"\r\n    },\r\n    \"confirmedRequests\": 0,\r\n    \"createdOn\": \"2023-08-11T18:42:18.528444\",\r\n    \"description\": \"Et ipsam et. Voluptates minus provident. Doloribus architecto sit molestias doloribus nobis possimus consectetur. Provident explicabo id. Ea alias sit facilis sit exercitationem beatae. Doloremque aut consectetur iste et sunt ea aut at provident.\\n \\rEt exercitationem voluptatem. Placeat omnis non mollitia saepe sint voluptas. Dicta tempora impedit quidem nihil qui quod assumenda reprehenderit alias. Sit aut sed quam ea distinctio quia. Similique eveniet eaque.\\n \\rBeatae expedita laudantium alias molestias et quos velit ducimus. Et modi quam ipsa praesentium. Unde blanditiis aut dolor sequi nam nesciunt officia aut. Consequatur optio iusto earum mollitia similique.\",\r\n    \"eventDate\": \"2023-08-11 23:42:18\",\r\n    \"initiator\": {\r\n        \"id\": 1,\r\n        \"name\": \"Kara Schroeder\"\r\n    },\r\n    \"location\": {\r\n        \"id\": 1,\r\n        \"lat\": -0.1568,\r\n        \"lon\": -172.841\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 761,\r\n    \"publishedOn\": \"2023-08-11T18:42:18.61963\",\r\n    \"requestModeration\": false,\r\n    \"state\": \"PUBLISHED\",\r\n    \"title\": \"Labore modi rerum id sit et.\",\r\n    \"views\": 1,\r\n    \"comments\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1",
							"description": "(Required) id события"
						}
					]
				},
				"description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [

				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		}
	]
}